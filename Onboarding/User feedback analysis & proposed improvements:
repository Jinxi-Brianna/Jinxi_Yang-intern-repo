Identify 8 improvements that could enhance the user experience.  
Consider potential business or technical constraints that might impact implementation.  
Prioritise the improvements based on feasibility.

---

## UX Improvements & Feasibility Analysis

| # | Improvement | Description | Constraints | Priority |
|--|-------------|-------------|-------------|----------|
| 1 | Fix fake “Allow” button | The “Allow” label appears interactive but does nothing, misleading users during notification setup. | Minor frontend fix; no business constraints. | High |
| 2 | Add feature carousel before goal input | Users are asked to input goals before understanding app functionality, leading to confusion. | UI addition; supports business goal of showcasing value early. | High |
| 3 | Align suggested habits with user goals | Goals like “Improve eye health” are not reflected in habit suggestions, causing a disconnect. | Requires goal-to-habit mapping logic; moderate complexity. | High |
| 4 | Simplify onboarding flow | The current process is long and causes users to forget earlier inputs. Cognitive load is high. | Requires UX restructuring and possible backend logic adjustment. | Medium |
| 5 | Clarify screen time logic (5 PM vs 10 PM) | Contradictory messages around blocking time cause user confusion. | Primarily copy/UI change; minimal technical effort. | Medium |
| 6 | Soften tone around enforcement (“Earn screen time”) | User felt the app was paternalistic. More supportive language would feel less controlling. | Text-only fix is easy; character-system redesign would take more effort. | Medium (copy) / Low (character) |
| 7 | Fix app re-entry after blocking | “Open FocusBear” failed after blocking YouTube; app didn’t resume properly. | Involves OS-level behavior and notification handling; medium technical effort. | Low–Medium |
| 8 | Emphasize notification permission importance | Denying notifications breaks key reminders, but this is not clearly communicated. | Simple UI text addition; no backend changes. | High |

---

## Prioritised Implementation Plan

### High Priority – Quick Wins
- Fix fake “Allow” button
- Add feature carousel before goal input
- Emphasize importance of notification permission
- Align habits with user goals

### Medium Priority – Structural or Copy Refinement
- Clarify screen time logic (5 PM vs 10 PM)
- Simplify onboarding structure
- Revise tone around habit enforcement (copy only)

### Low Priority – Deferred or Complex
- Character-based Bear dialogues
- Debug return-from-block flow after focus session

---

## Reflection

### If a UX change benefits users but conflicts with business goals, how would you approach the discussion?

I would start by reframing the UX benefit in business terms. For example, instead of saying “this change improves clarity,” I would explain how it reduces onboarding drop-off or increases user activation. If the perceived conflict remains, I would propose running a small-scale A/B test to validate whether the change truly harms the business goal in question. This balances user needs with business realities and creates space for evidence-based decisions. I would also acknowledge trade-offs transparently while advocating for long-term value over short-term gains.

---

### How can designers work with PMs and developers to find compromises between ideal UX and technical feasibility?

Collaboration is most effective when it begins early. I would involve PMs and developers during the low-fidelity stage to identify potential constraints before designs are finalized. If an ideal interaction is not feasible, I would provide layered alternatives—such as a simplified version for the current release and a full version for a future sprint. It’s also important to clarify which elements are essential to the experience and which are flexible. Framing design discussions around effort-impact trade-offs helps the team make informed, collaborative decisions that respect both usability and engineering constraints.

---

### What are the risks of making too many small UX changes too quickly?

Rapid, uncoordinated UX changes can lead to inconsistency in visual styles, interaction patterns, and copy tone. This risks eroding user trust and causing confusion, especially for returning users who expect stable patterns. It can also overwhelm development and QA workflows, increasing the chance of regressions or technical debt. Additionally, if too many changes are introduced at once, it becomes difficult to attribute impact to any single change, reducing the clarity of iteration outcomes. To mitigate these risks, I would group small updates into structured releases and maintain a clear changelog for internal and external alignment.
